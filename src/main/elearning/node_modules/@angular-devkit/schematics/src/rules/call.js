"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
const core_1 = require("@angular-devkit/core");
const Observable_1 = require("rxjs/Observable");
const throw_1 = require("rxjs/observable/throw");
const last_1 = require("rxjs/operators/last");
const mergeMap_1 = require("rxjs/operators/mergeMap");
const tap_1 = require("rxjs/operators/tap");
const interface_1 = require("../tree/interface");
function _getTypeOfResult(value) {
    if (value === undefined) {
        return 'undefined';
    }
    else if (value === null) {
        return 'null';
    }
    else if (typeof value == 'function') {
        return `Function()`;
    }
    else if (typeof value != 'object') {
        return `${typeof value}(${JSON.stringify(value)})`;
    }
    else {
        if (Object.getPrototypeOf(value) == Object) {
            return `Object(${JSON.stringify(value)})`;
        }
        else if (value.constructor) {
            return `Instance of class ${value.constructor.name}`;
        }
        else {
            return 'Unknown Object';
        }
    }
}
/**
 * When a rule or source returns an invalid value.
 */
class InvalidRuleResultException extends core_1.BaseException {
    constructor(value) {
        super(`Invalid rule result: ${_getTypeOfResult(value)}.`);
    }
}
exports.InvalidRuleResultException = InvalidRuleResultException;
class InvalidSourceResultException extends core_1.BaseException {
    constructor(value) {
        super(`Invalid source result: ${_getTypeOfResult(value)}.`);
    }
}
exports.InvalidSourceResultException = InvalidSourceResultException;
function callSource(source, context) {
    const result = source(context);
    if (result === undefined) {
        return throw_1._throw(new InvalidSourceResultException(result));
    }
    else if (interface_1.TreeSymbol in result) {
        return Observable_1.Observable.of(result);
    }
    else if (Symbol.observable in result) {
        // Only return the last Tree, and make sure it's a Tree.
        return result.pipe(last_1.last(), tap_1.tap(inner => {
            if (!(interface_1.TreeSymbol in inner)) {
                throw new InvalidSourceResultException(inner);
            }
        }));
    }
    else {
        return throw_1._throw(new InvalidSourceResultException(result));
    }
}
exports.callSource = callSource;
function callRule(rule, input, context) {
    return input.pipe(mergeMap_1.mergeMap(inputTree => {
        const result = rule(inputTree, context);
        if (result === undefined) {
            return Observable_1.Observable.of(inputTree);
        }
        else if (interface_1.TreeSymbol in result) {
            return Observable_1.Observable.of(result);
        }
        else if (Symbol.observable in result) {
            const obs = result;
            // Only return the last Tree, and make sure it's a Tree.
            return obs.pipe(last_1.last(), tap_1.tap(inner => {
                if (!(interface_1.TreeSymbol in inner)) {
                    throw new InvalidRuleResultException(inner);
                }
            }));
        }
        else if (result === undefined) {
            return Observable_1.Observable.of(inputTree);
        }
        else {
            return throw_1._throw(new InvalidRuleResultException(result));
        }
    }));
}
exports.callRule = callRule;
//# sourceMappingURL=data:application/json;base64,