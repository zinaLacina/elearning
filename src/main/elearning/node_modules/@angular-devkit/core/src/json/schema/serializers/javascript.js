"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
const exception_1 = require("../../../exception/exception");
const strings_1 = require("../../../utils/strings");
const interface_1 = require("./interface");
class InvalidRangeException extends exception_1.BaseException {
    constructor(name, value, comparator, expected) {
        super(`Property ${JSON.stringify(name)} expected a value `
            + `${comparator} ${JSON.stringify(expected)}, received ${JSON.stringify(value)}.`);
    }
}
exports.InvalidRangeException = InvalidRangeException;
class InvalidValueException extends exception_1.BaseException {
    constructor(name, value, expected) {
        super(`Property ${JSON.stringify(name)} expected a value of type ${expected}, `
            + `received ${value}.`);
    }
}
exports.InvalidValueException = InvalidValueException;
class InvalidSchemaException extends exception_1.BaseException {
    constructor(schema) {
        super(`Invalid schema: ${JSON.stringify(schema)}`);
    }
}
exports.InvalidSchemaException = InvalidSchemaException;
class InvalidPropertyNameException extends exception_1.BaseException {
    constructor(path) {
        super(`Property ${JSON.stringify(path)} does not exist in the schema, and no additional `
            + `properties are allowed.`);
        this.path = path;
    }
}
exports.InvalidPropertyNameException = InvalidPropertyNameException;
class RequiredValueMissingException extends exception_1.BaseException {
    constructor(path) {
        super(`Property ${JSON.stringify(path)} is required but missing.`);
        this.path = path;
    }
}
exports.RequiredValueMissingException = RequiredValueMissingException;
exports.exceptions = {
    InvalidRangeException,
    InvalidSchemaException,
    InvalidValueException,
    InvalidPropertyNameException,
    RequiredValueMissingException,
};
const symbols = {
    Schema: Symbol('schema'),
};
class JavascriptSerializer extends interface_1.JsonSchemaSerializer {
    constructor(_options) {
        super();
        this._options = _options;
        this._uniqueSet = new Set();
    }
    _unique(name) {
        let i = 1;
        let result = name;
        while (this._uniqueSet.has(result)) {
            result = name + i;
            i++;
        }
        this._uniqueSet.add(result);
        return result;
    }
    serialize(ref, registry) {
        const rootSchema = registry.getSchemaFromRef(ref);
        const { root, templates } = require('./templates/javascript');
        const source = root({
            exceptions: exports.exceptions,
            name: '',
            options: this._options || {},
            schema: rootSchema,
            strings: {
                classify: strings_1.classify,
                camelize: strings_1.camelize,
            },
            symbols,
            templates,
        });
        const fn = new Function('registry', 'exceptions', 'symbols', 'value', source);
        return (value) => fn(registry, exports.exceptions, symbols, value);
    }
}
exports.JavascriptSerializer = JavascriptSerializer;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiamF2YXNjcmlwdC5qcyIsInNvdXJjZVJvb3QiOiIvVXNlcnMvaGFuc2wvU291cmNlcy9oYW5zbC9kZXZraXQvIiwic291cmNlcyI6WyJwYWNrYWdlcy9hbmd1bGFyX2RldmtpdC9jb3JlL3NyYy9qc29uL3NjaGVtYS9zZXJpYWxpemVycy9qYXZhc2NyaXB0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUE7Ozs7OztHQU1HO0FBQ0gsNERBQTZEO0FBQzdELG9EQUE0RDtBQUc1RCwyQ0FBbUQ7QUFHbkQsMkJBQXNDLFNBQVEseUJBQWE7SUFDekQsWUFBWSxJQUFZLEVBQUUsS0FBUSxFQUFFLFVBQWtCLEVBQUUsUUFBVztRQUNqRSxLQUFLLENBQUMsWUFBWSxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxvQkFBb0I7Y0FDdEQsR0FBRyxVQUFVLElBQUksSUFBSSxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUMsY0FBYyxJQUFJLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUN2RixDQUFDO0NBQ0Y7QUFMRCxzREFLQztBQUNELDJCQUFtQyxTQUFRLHlCQUFhO0lBQ3RELFlBQVksSUFBWSxFQUFFLEtBQVMsRUFBRSxRQUFnQjtRQUNuRCxLQUFLLENBQUMsWUFBWSxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyw2QkFBNkIsUUFBUSxJQUFJO2NBQ3pFLFlBQVksS0FBSyxHQUFHLENBQUMsQ0FBQztJQUM5QixDQUFDO0NBQ0Y7QUFMRCxzREFLQztBQUNELDRCQUFvQyxTQUFRLHlCQUFhO0lBQ3ZELFlBQVksTUFBa0I7UUFDNUIsS0FBSyxDQUFDLG1CQUFtQixJQUFJLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUNyRCxDQUFDO0NBQ0Y7QUFKRCx3REFJQztBQUNELGtDQUEwQyxTQUFRLHlCQUFhO0lBQzdELFlBQTRCLElBQVk7UUFDdEMsS0FBSyxDQUFDLFlBQVksSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsbURBQW1EO2NBQ25GLHlCQUF5QixDQUFDLENBQUM7UUFGUCxTQUFJLEdBQUosSUFBSSxDQUFRO0lBR3hDLENBQUM7Q0FDRjtBQUxELG9FQUtDO0FBQ0QsbUNBQTJDLFNBQVEseUJBQWE7SUFDOUQsWUFBNEIsSUFBWTtRQUN0QyxLQUFLLENBQUMsWUFBWSxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQywyQkFBMkIsQ0FBQyxDQUFDO1FBRHpDLFNBQUksR0FBSixJQUFJLENBQVE7SUFFeEMsQ0FBQztDQUNGO0FBSkQsc0VBSUM7QUFHWSxRQUFBLFVBQVUsR0FBRztJQUN4QixxQkFBcUI7SUFDckIsc0JBQXNCO0lBQ3RCLHFCQUFxQjtJQUNyQiw0QkFBNEI7SUFDNUIsNkJBQTZCO0NBQzlCLENBQUM7QUFHRixNQUFNLE9BQU8sR0FBRztJQUNkLE1BQU0sRUFBRSxNQUFNLENBQUMsUUFBUSxDQUFDO0NBQ3pCLENBQUM7QUFXRiwwQkFBcUMsU0FBUSxnQ0FBcUM7SUFHaEYsWUFBb0IsUUFBc0M7UUFBSSxLQUFLLEVBQUUsQ0FBQztRQUFsRCxhQUFRLEdBQVIsUUFBUSxDQUE4QjtRQUZsRCxlQUFVLEdBQUcsSUFBSSxHQUFHLEVBQVUsQ0FBQztJQUVnQyxDQUFDO0lBRTlELE9BQU8sQ0FBQyxJQUFZO1FBQzVCLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUNWLElBQUksTUFBTSxHQUFHLElBQUksQ0FBQztRQUNsQixPQUFPLElBQUksQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUM7WUFDbkMsTUFBTSxHQUFHLElBQUksR0FBRyxDQUFDLENBQUM7WUFDbEIsQ0FBQyxFQUFFLENBQUM7UUFDTixDQUFDO1FBQ0QsSUFBSSxDQUFDLFVBQVUsQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUM7UUFFNUIsTUFBTSxDQUFDLE1BQU0sQ0FBQztJQUNoQixDQUFDO0lBRUQsU0FBUyxDQUFDLEdBQVcsRUFBRSxRQUE0QjtRQUNqRCxNQUFNLFVBQVUsR0FBRyxRQUFRLENBQUMsZ0JBQWdCLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDbEQsTUFBTSxFQUFFLElBQUksRUFBRSxTQUFTLEVBQUUsR0FBRyxPQUFPLENBQUMsd0JBQXdCLENBQUMsQ0FBQztRQUU5RCxNQUFNLE1BQU0sR0FBRyxJQUFJLENBQUM7WUFDbEIsVUFBVSxFQUFWLGtCQUFVO1lBQ1YsSUFBSSxFQUFFLEVBQUU7WUFDUixPQUFPLEVBQUUsSUFBSSxDQUFDLFFBQVEsSUFBSSxFQUFFO1lBQzVCLE1BQU0sRUFBRSxVQUFVO1lBQ2xCLE9BQU8sRUFBRTtnQkFDUCxRQUFRLEVBQVIsa0JBQVE7Z0JBQ1IsUUFBUSxFQUFSLGtCQUFRO2FBQ1Q7WUFDRCxPQUFPO1lBQ1AsU0FBUztTQUNWLENBQUMsQ0FBQztRQUVILE1BQU0sRUFBRSxHQUFHLElBQUksUUFBUSxDQUFDLFVBQVUsRUFBRSxZQUFZLEVBQUUsU0FBUyxFQUFFLE9BQU8sRUFBRSxNQUFNLENBQUMsQ0FBQztRQUU5RSxNQUFNLENBQUMsQ0FBQyxLQUFRLEVBQUUsRUFBRSxDQUFDLEVBQUUsQ0FBQyxRQUFRLEVBQUUsa0JBQVUsRUFBRSxPQUFPLEVBQUUsS0FBSyxDQUFDLENBQUM7SUFDaEUsQ0FBQztDQUNGO0FBdENELG9EQXNDQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCBHb29nbGUgSW5jLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGFuIE1JVC1zdHlsZSBsaWNlbnNlIHRoYXQgY2FuIGJlXG4gKiBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGF0IGh0dHBzOi8vYW5ndWxhci5pby9saWNlbnNlXG4gKi9cbmltcG9ydCB7IEJhc2VFeGNlcHRpb24gfSBmcm9tICcuLi8uLi8uLi9leGNlcHRpb24vZXhjZXB0aW9uJztcbmltcG9ydCB7IGNhbWVsaXplLCBjbGFzc2lmeSB9IGZyb20gJy4uLy4uLy4uL3V0aWxzL3N0cmluZ3MnO1xuaW1wb3J0IHsgSnNvblNjaGVtYVJlZ2lzdHJ5IH0gZnJvbSAnLi4vcmVnaXN0cnknO1xuaW1wb3J0IHsgSnNvblNjaGVtYSB9IGZyb20gJy4uL3NjaGVtYSc7XG5pbXBvcnQgeyBKc29uU2NoZW1hU2VyaWFsaXplciB9IGZyb20gJy4vaW50ZXJmYWNlJztcblxuXG5leHBvcnQgY2xhc3MgSW52YWxpZFJhbmdlRXhjZXB0aW9uPFQ+IGV4dGVuZHMgQmFzZUV4Y2VwdGlvbiB7XG4gIGNvbnN0cnVjdG9yKG5hbWU6IHN0cmluZywgdmFsdWU6IFQsIGNvbXBhcmF0b3I6IHN0cmluZywgZXhwZWN0ZWQ6IFQpIHtcbiAgICBzdXBlcihgUHJvcGVydHkgJHtKU09OLnN0cmluZ2lmeShuYW1lKX0gZXhwZWN0ZWQgYSB2YWx1ZSBgXG4gICAgICArIGAke2NvbXBhcmF0b3J9ICR7SlNPTi5zdHJpbmdpZnkoZXhwZWN0ZWQpfSwgcmVjZWl2ZWQgJHtKU09OLnN0cmluZ2lmeSh2YWx1ZSl9LmApO1xuICB9XG59XG5leHBvcnQgY2xhc3MgSW52YWxpZFZhbHVlRXhjZXB0aW9uIGV4dGVuZHMgQmFzZUV4Y2VwdGlvbiB7XG4gIGNvbnN0cnVjdG9yKG5hbWU6IHN0cmluZywgdmFsdWU6IHt9LCBleHBlY3RlZDogc3RyaW5nKSB7XG4gICAgc3VwZXIoYFByb3BlcnR5ICR7SlNPTi5zdHJpbmdpZnkobmFtZSl9IGV4cGVjdGVkIGEgdmFsdWUgb2YgdHlwZSAke2V4cGVjdGVkfSwgYFxuICAgICAgICArIGByZWNlaXZlZCAke3ZhbHVlfS5gKTtcbiAgfVxufVxuZXhwb3J0IGNsYXNzIEludmFsaWRTY2hlbWFFeGNlcHRpb24gZXh0ZW5kcyBCYXNlRXhjZXB0aW9uIHtcbiAgY29uc3RydWN0b3Ioc2NoZW1hOiBKc29uU2NoZW1hKSB7XG4gICAgc3VwZXIoYEludmFsaWQgc2NoZW1hOiAke0pTT04uc3RyaW5naWZ5KHNjaGVtYSl9YCk7XG4gIH1cbn1cbmV4cG9ydCBjbGFzcyBJbnZhbGlkUHJvcGVydHlOYW1lRXhjZXB0aW9uIGV4dGVuZHMgQmFzZUV4Y2VwdGlvbiB7XG4gIGNvbnN0cnVjdG9yKHB1YmxpYyByZWFkb25seSBwYXRoOiBzdHJpbmcpIHtcbiAgICBzdXBlcihgUHJvcGVydHkgJHtKU09OLnN0cmluZ2lmeShwYXRoKX0gZG9lcyBub3QgZXhpc3QgaW4gdGhlIHNjaGVtYSwgYW5kIG5vIGFkZGl0aW9uYWwgYFxuICAgICAgICArIGBwcm9wZXJ0aWVzIGFyZSBhbGxvd2VkLmApO1xuICB9XG59XG5leHBvcnQgY2xhc3MgUmVxdWlyZWRWYWx1ZU1pc3NpbmdFeGNlcHRpb24gZXh0ZW5kcyBCYXNlRXhjZXB0aW9uIHtcbiAgY29uc3RydWN0b3IocHVibGljIHJlYWRvbmx5IHBhdGg6IHN0cmluZykge1xuICAgIHN1cGVyKGBQcm9wZXJ0eSAke0pTT04uc3RyaW5naWZ5KHBhdGgpfSBpcyByZXF1aXJlZCBidXQgbWlzc2luZy5gKTtcbiAgfVxufVxuXG5cbmV4cG9ydCBjb25zdCBleGNlcHRpb25zID0ge1xuICBJbnZhbGlkUmFuZ2VFeGNlcHRpb24sXG4gIEludmFsaWRTY2hlbWFFeGNlcHRpb24sXG4gIEludmFsaWRWYWx1ZUV4Y2VwdGlvbixcbiAgSW52YWxpZFByb3BlcnR5TmFtZUV4Y2VwdGlvbixcbiAgUmVxdWlyZWRWYWx1ZU1pc3NpbmdFeGNlcHRpb24sXG59O1xuXG5cbmNvbnN0IHN5bWJvbHMgPSB7XG4gIFNjaGVtYTogU3ltYm9sKCdzY2hlbWEnKSxcbn07XG5cblxuZXhwb3J0IGludGVyZmFjZSBKYXZhc2NyaXB0U2VyaWFsaXplck9wdGlvbnMge1xuICAvLyBEbyBub3QgdGhyb3cgYW4gZXhjZXB0aW9uIGlmIGFuIGV4dHJhIHByb3BlcnR5IGlzIHBhc3NlZCwgc2ltcGx5IGlnbm9yZSBpdC5cbiAgaWdub3JlRXh0cmFQcm9wZXJ0aWVzPzogYm9vbGVhbjtcbiAgLy8gQWxsb3cgYWNjZXNzaW5nIHVuZGVmaW5lZCBvYmplY3RzLCB3aGljaCBtaWdodCBoYXZlIGRlZmF1bHQgcHJvcGVydHkgdmFsdWVzLlxuICBhbGxvd0FjY2Vzc1VuZGVmaW5lZE9iamVjdHM/OiBib29sZWFuO1xufVxuXG5cbmV4cG9ydCBjbGFzcyBKYXZhc2NyaXB0U2VyaWFsaXplcjxUPiBleHRlbmRzIEpzb25TY2hlbWFTZXJpYWxpemVyPCh2YWx1ZTogVCkgPT4gVD4ge1xuICBwcml2YXRlIF91bmlxdWVTZXQgPSBuZXcgU2V0PHN0cmluZz4oKTtcblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIF9vcHRpb25zPzogSmF2YXNjcmlwdFNlcmlhbGl6ZXJPcHRpb25zKSB7IHN1cGVyKCk7IH1cblxuICBwcm90ZWN0ZWQgX3VuaXF1ZShuYW1lOiBzdHJpbmcpIHtcbiAgICBsZXQgaSA9IDE7XG4gICAgbGV0IHJlc3VsdCA9IG5hbWU7XG4gICAgd2hpbGUgKHRoaXMuX3VuaXF1ZVNldC5oYXMocmVzdWx0KSkge1xuICAgICAgcmVzdWx0ID0gbmFtZSArIGk7XG4gICAgICBpKys7XG4gICAgfVxuICAgIHRoaXMuX3VuaXF1ZVNldC5hZGQocmVzdWx0KTtcblxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICBzZXJpYWxpemUocmVmOiBzdHJpbmcsIHJlZ2lzdHJ5OiBKc29uU2NoZW1hUmVnaXN0cnkpIHtcbiAgICBjb25zdCByb290U2NoZW1hID0gcmVnaXN0cnkuZ2V0U2NoZW1hRnJvbVJlZihyZWYpO1xuICAgIGNvbnN0IHsgcm9vdCwgdGVtcGxhdGVzIH0gPSByZXF1aXJlKCcuL3RlbXBsYXRlcy9qYXZhc2NyaXB0Jyk7XG5cbiAgICBjb25zdCBzb3VyY2UgPSByb290KHtcbiAgICAgIGV4Y2VwdGlvbnMsXG4gICAgICBuYW1lOiAnJyxcbiAgICAgIG9wdGlvbnM6IHRoaXMuX29wdGlvbnMgfHwge30sXG4gICAgICBzY2hlbWE6IHJvb3RTY2hlbWEsXG4gICAgICBzdHJpbmdzOiB7XG4gICAgICAgIGNsYXNzaWZ5LFxuICAgICAgICBjYW1lbGl6ZSxcbiAgICAgIH0sXG4gICAgICBzeW1ib2xzLFxuICAgICAgdGVtcGxhdGVzLFxuICAgIH0pO1xuXG4gICAgY29uc3QgZm4gPSBuZXcgRnVuY3Rpb24oJ3JlZ2lzdHJ5JywgJ2V4Y2VwdGlvbnMnLCAnc3ltYm9scycsICd2YWx1ZScsIHNvdXJjZSk7XG5cbiAgICByZXR1cm4gKHZhbHVlOiBUKSA9PiBmbihyZWdpc3RyeSwgZXhjZXB0aW9ucywgc3ltYm9scywgdmFsdWUpO1xuICB9XG59XG4iXX0=