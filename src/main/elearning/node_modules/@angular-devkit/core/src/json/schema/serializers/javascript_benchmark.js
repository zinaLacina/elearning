"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
// tslint:disable:no-any
const benchmark_1 = require("@_/benchmark");
const json_schema_1 = require("@ngtools/json-schema");
const fs = require("fs");
const path = require("path");
const registry_1 = require("../registry");
const javascript_1 = require("./javascript");
describe('JavaScript Serializer', () => {
    // Schema for the Angular-CLI config.
    const jsonPath = path.join(global._DevKitRoot, 'tests/@angular_devkit/core/json/schema/serializers/schema_benchmark.json');
    const jsonContent = fs.readFileSync(jsonPath).toString();
    const complexSchema = JSON.parse(jsonContent);
    const registry = new registry_1.JsonSchemaRegistry();
    registry.addSchema('', complexSchema);
    benchmark_1.benchmark('schema parsing', () => {
        new javascript_1.JavascriptSerializer().serialize('', registry)({});
    }, () => {
        const SchemaMetaClass = json_schema_1.SchemaClassFactory(complexSchema);
        const schemaClass = new SchemaMetaClass({});
        schemaClass.$$root();
    });
    (function () {
        const registry = new registry_1.JsonSchemaRegistry();
        registry.addSchema('', complexSchema);
        const coreRoot = new javascript_1.JavascriptSerializer().serialize('', registry)({});
        const SchemaMetaClass = json_schema_1.SchemaClassFactory(complexSchema);
        const schemaClass = new SchemaMetaClass({});
        const ngtoolsRoot = schemaClass.$$root();
        benchmark_1.benchmark('schema access', () => {
            coreRoot.project = { name: 'abc' };
        }, () => {
            ngtoolsRoot.project = { name: 'abc' };
        });
    })();
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiamF2YXNjcmlwdF9iZW5jaG1hcmsuanMiLCJzb3VyY2VSb290IjoiL1VzZXJzL2hhbnNsL1NvdXJjZXMvaGFuc2wvZGV2a2l0LyIsInNvdXJjZXMiOlsicGFja2FnZXMvYW5ndWxhcl9kZXZraXQvY29yZS9zcmMvanNvbi9zY2hlbWEvc2VyaWFsaXplcnMvamF2YXNjcmlwdF9iZW5jaG1hcmsudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQTs7Ozs7O0dBTUc7QUFDSCx3QkFBd0I7QUFDeEIsNENBQXlDO0FBQ3pDLHNEQUEwRDtBQUMxRCx5QkFBeUI7QUFDekIsNkJBQTZCO0FBQzdCLDBDQUFpRDtBQUVqRCw2Q0FBb0Q7QUFFcEQsUUFBUSxDQUFDLHVCQUF1QixFQUFFLEdBQUcsRUFBRTtJQUNyQyxxQ0FBcUM7SUFDckMsTUFBTSxRQUFRLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FDdkIsTUFBYyxDQUFDLFdBQVcsRUFDM0IsMEVBQTBFLENBQzNFLENBQUM7SUFDRixNQUFNLFdBQVcsR0FBRyxFQUFFLENBQUMsWUFBWSxDQUFDLFFBQVEsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDO0lBQ3pELE1BQU0sYUFBYSxHQUFlLElBQUksQ0FBQyxLQUFLLENBQUMsV0FBVyxDQUFDLENBQUM7SUFFMUQsTUFBTSxRQUFRLEdBQUcsSUFBSSw2QkFBa0IsRUFBRSxDQUFDO0lBQzFDLFFBQVEsQ0FBQyxTQUFTLENBQUMsRUFBRSxFQUFFLGFBQWEsQ0FBQyxDQUFDO0lBRXRDLHFCQUFTLENBQUMsZ0JBQWdCLEVBQUUsR0FBRyxFQUFFO1FBQy9CLElBQUksaUNBQW9CLEVBQUUsQ0FBQyxTQUFTLENBQUMsRUFBRSxFQUFFLFFBQVEsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBQ3pELENBQUMsRUFBRSxHQUFHLEVBQUU7UUFDTixNQUFNLGVBQWUsR0FBRyxnQ0FBa0IsQ0FBTSxhQUFhLENBQUMsQ0FBQztRQUMvRCxNQUFNLFdBQVcsR0FBRyxJQUFJLGVBQWUsQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUM1QyxXQUFXLENBQUMsTUFBTSxFQUFFLENBQUM7SUFDdkIsQ0FBQyxDQUFDLENBQUM7SUFFSCxDQUFDO1FBQ0MsTUFBTSxRQUFRLEdBQUcsSUFBSSw2QkFBa0IsRUFBRSxDQUFDO1FBQzFDLFFBQVEsQ0FBQyxTQUFTLENBQUMsRUFBRSxFQUFFLGFBQWEsQ0FBQyxDQUFDO1FBQ3RDLE1BQU0sUUFBUSxHQUFHLElBQUksaUNBQW9CLEVBQUUsQ0FBQyxTQUFTLENBQUMsRUFBRSxFQUFFLFFBQVEsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBRXhFLE1BQU0sZUFBZSxHQUFHLGdDQUFrQixDQUFNLGFBQWEsQ0FBQyxDQUFDO1FBQy9ELE1BQU0sV0FBVyxHQUFHLElBQUksZUFBZSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBQzVDLE1BQU0sV0FBVyxHQUFHLFdBQVcsQ0FBQyxNQUFNLEVBQUUsQ0FBQztRQUV6QyxxQkFBUyxDQUFDLGVBQWUsRUFBRSxHQUFHLEVBQUU7WUFDOUIsUUFBUSxDQUFDLE9BQU8sR0FBRyxFQUFFLElBQUksRUFBRSxLQUFLLEVBQUUsQ0FBQztRQUNyQyxDQUFDLEVBQUUsR0FBRyxFQUFFO1lBQ04sV0FBVyxDQUFDLE9BQU8sR0FBRyxFQUFFLElBQUksRUFBRSxLQUFLLEVBQUUsQ0FBQztRQUN4QyxDQUFDLENBQUMsQ0FBQztJQUNMLENBQUMsQ0FBQyxFQUFFLENBQUM7QUFDUCxDQUFDLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCBHb29nbGUgSW5jLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGFuIE1JVC1zdHlsZSBsaWNlbnNlIHRoYXQgY2FuIGJlXG4gKiBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGF0IGh0dHBzOi8vYW5ndWxhci5pby9saWNlbnNlXG4gKi9cbi8vIHRzbGludDpkaXNhYmxlOm5vLWFueVxuaW1wb3J0IHsgYmVuY2htYXJrIH0gZnJvbSAnQF8vYmVuY2htYXJrJztcbmltcG9ydCB7IFNjaGVtYUNsYXNzRmFjdG9yeSB9IGZyb20gJ0BuZ3Rvb2xzL2pzb24tc2NoZW1hJztcbmltcG9ydCAqIGFzIGZzIGZyb20gJ2ZzJztcbmltcG9ydCAqIGFzIHBhdGggZnJvbSAncGF0aCc7XG5pbXBvcnQgeyBKc29uU2NoZW1hUmVnaXN0cnkgfSBmcm9tICcuLi9yZWdpc3RyeSc7XG5pbXBvcnQgeyBKc29uU2NoZW1hIH0gZnJvbSAnLi4vc2NoZW1hJztcbmltcG9ydCB7IEphdmFzY3JpcHRTZXJpYWxpemVyIH0gZnJvbSAnLi9qYXZhc2NyaXB0JztcblxuZGVzY3JpYmUoJ0phdmFTY3JpcHQgU2VyaWFsaXplcicsICgpID0+IHtcbiAgLy8gU2NoZW1hIGZvciB0aGUgQW5ndWxhci1DTEkgY29uZmlnLlxuICBjb25zdCBqc29uUGF0aCA9IHBhdGguam9pbihcbiAgICAoZ2xvYmFsIGFzIGFueSkuX0RldktpdFJvb3QsXG4gICAgJ3Rlc3RzL0Bhbmd1bGFyX2RldmtpdC9jb3JlL2pzb24vc2NoZW1hL3NlcmlhbGl6ZXJzL3NjaGVtYV9iZW5jaG1hcmsuanNvbicsXG4gICk7XG4gIGNvbnN0IGpzb25Db250ZW50ID0gZnMucmVhZEZpbGVTeW5jKGpzb25QYXRoKS50b1N0cmluZygpO1xuICBjb25zdCBjb21wbGV4U2NoZW1hOiBKc29uU2NoZW1hID0gSlNPTi5wYXJzZShqc29uQ29udGVudCk7XG5cbiAgY29uc3QgcmVnaXN0cnkgPSBuZXcgSnNvblNjaGVtYVJlZ2lzdHJ5KCk7XG4gIHJlZ2lzdHJ5LmFkZFNjaGVtYSgnJywgY29tcGxleFNjaGVtYSk7XG5cbiAgYmVuY2htYXJrKCdzY2hlbWEgcGFyc2luZycsICgpID0+IHtcbiAgICBuZXcgSmF2YXNjcmlwdFNlcmlhbGl6ZXIoKS5zZXJpYWxpemUoJycsIHJlZ2lzdHJ5KSh7fSk7XG4gIH0sICgpID0+IHtcbiAgICBjb25zdCBTY2hlbWFNZXRhQ2xhc3MgPSBTY2hlbWFDbGFzc0ZhY3Rvcnk8YW55Pihjb21wbGV4U2NoZW1hKTtcbiAgICBjb25zdCBzY2hlbWFDbGFzcyA9IG5ldyBTY2hlbWFNZXRhQ2xhc3Moe30pO1xuICAgIHNjaGVtYUNsYXNzLiQkcm9vdCgpO1xuICB9KTtcblxuICAoZnVuY3Rpb24oKSB7XG4gICAgY29uc3QgcmVnaXN0cnkgPSBuZXcgSnNvblNjaGVtYVJlZ2lzdHJ5KCk7XG4gICAgcmVnaXN0cnkuYWRkU2NoZW1hKCcnLCBjb21wbGV4U2NoZW1hKTtcbiAgICBjb25zdCBjb3JlUm9vdCA9IG5ldyBKYXZhc2NyaXB0U2VyaWFsaXplcigpLnNlcmlhbGl6ZSgnJywgcmVnaXN0cnkpKHt9KTtcblxuICAgIGNvbnN0IFNjaGVtYU1ldGFDbGFzcyA9IFNjaGVtYUNsYXNzRmFjdG9yeTxhbnk+KGNvbXBsZXhTY2hlbWEpO1xuICAgIGNvbnN0IHNjaGVtYUNsYXNzID0gbmV3IFNjaGVtYU1ldGFDbGFzcyh7fSk7XG4gICAgY29uc3Qgbmd0b29sc1Jvb3QgPSBzY2hlbWFDbGFzcy4kJHJvb3QoKTtcblxuICAgIGJlbmNobWFyaygnc2NoZW1hIGFjY2VzcycsICgpID0+IHtcbiAgICAgIGNvcmVSb290LnByb2plY3QgPSB7IG5hbWU6ICdhYmMnIH07XG4gICAgfSwgKCkgPT4ge1xuICAgICAgbmd0b29sc1Jvb3QucHJvamVjdCA9IHsgbmFtZTogJ2FiYycgfTtcbiAgICB9KTtcbiAgfSkoKTtcbn0pO1xuIl19